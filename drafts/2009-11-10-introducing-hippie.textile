---
categories: work
layout: article
title: Introducing Hippie
---

h1. {{ page.title }}

p(meta). November 10, 2009

My current project integrates with a lot of external services.  Unfortunately, our service-level agreements do not extend to our development and testing environments, so our application breaks frequently because of service problems.  Services go down, services have bugs in the latest development versions deployed in our environments, our environments are upgraded to new versions of services that are not backwards compatible with the old versions, etc.

We write "JUnit":http://www.junit.org tests to verify each service is running correctly in our environments, so we do not waste time debugging problems caused by service failures.  These tests make my team more productive, but unfortunately they do nothing to make the services more reliable.  At least, not by themselves...

Enter "hippie":http://github.com/sl4mmy/hippie

"Hippie":http://github.com/sl4mmy/hippie is an open source tool that automatically sends "Nagios":http://www.nagios.org "passive checks":http://nagios.sourceforge.net/docs/3_0/passivechecks.html based on the result of running "JUnit":http://www.junit.org tests.

"hippie":http://github.com/sl4mmy/hippie bridges the divide between developer tools and system administrator tools.  "JUnit":http://www.junit.org tests automatically notify "Nagios":http://www.nagios.org which automatically notifies other teams that their services are broken.

It is an extension of the automatic build notifications our continuous integration tools provide, only at much, much finer resolution.  "Hippie":http://github.com/sl4mmy/hippie makes it possible to notify Alice on "Team: Tiger" when TigerTests#shouldRespondWithOkStatus() fails, but notify Bob in production support when LegacyTests#shouldAlwaysBeUpAndRunning() fails.

Those "JUnit":http://www.junit.org tests we wrote no longer just prevent us from wasting time debugging service problems, they now kick off a chain of events culminating (hopefully) with someone else fixing the problem: the ultimate goal of every programming endeavor.