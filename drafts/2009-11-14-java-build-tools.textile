---
categories: work
date: November 14, 2009
layout: article
title: Java Build Tools: Ant vs. Maven
---

The best build tool is the one you write yourself.  Every project's build process is unique, and often individual projects need to be built multiple different ways.  It is impossible for tool authors to anticipate every build's requirements, and foolhardy to try ("Apache":http://jakarta.apache.org developers: take note).  The best any tool can do is provide a flexible library of reusable tasks that can easily be adapted to your needs, but even that is insufficient.  Off-the-shelf tasks never suit your project perfectly.  You will waste countless hours struggling to make those tasks do _exactly_ what you need, only to give up and write a plugin instead.  Writing your own custom build tool is quick and easy, and requires less maintenance than you fear.  Don't be afraid: builds should fit your project, not the other way around.

If you do not want to write your own build tool, then you should use "Rake":http://rake.rubyforge.org.  "Rake":http://rake.rubyforge.org is the best existing build tool for Java projects.  "Rake":http://rake.rubyforge.org provides a bunch of standard methods to perform common build tasks, and anything else can be quickly implemented in "Ruby":http://www.ruby-lang.org.  Writing build scripts in a real programming language gives "Rake":http://rake.rubyforge.org a huge advantage over other tools.  There are other advantages, too, but none are as important.

So, you should write your a custom build tool.  If you don't want to, then you should switch to "Rake":http://rake.rubyforge.org.  If you can't switch, you should lobby for the right to switch.  If politics drives technology decisions, if you will never be allowed to switch, then quit your job or leave the project; life is too short to while away your precious time using inferior tools for no good reason.

If you lack the courage to quit, then use "Ant":http://ant.apache.org.  "Ant":http://ant.apache.org is the second best existing build tool for Java projects.  Although inferior to "Rake":http://rake.rubyforge.org, "Ant":http://ant.apache.org is still a great build tool.  "Ant":http://ant.apache.org is mature and stable, it is fast, and it comes with a rich library of tasks.  "Ant":http://ant.apache.org makes it possible (but "not at all easy":http://alex-verkhovsky.blogspot.com/2009/03/lets-use-real-languages-for-builds.html) to script rich, complex builds processes custom-tailored to your project.

So, write your own build tool, or else use "Rake":http://rake.rubyforge.org.  Otherwise, switch to "Rake":http://rake.rubyforge.org, or fight to switch to "Rake":http://rake.rubyforge.org, or quit and go some place where you can use "Rake":http://rake.rubyforge.org.  And if all else fails, use "Ant":http://ant.apache.org until you can find a new job with a company using "Rake":http://rake.rubyforge.org.

That's it!  Those are the *only* choices I can recommend!  Because you never, *ever*, under _any_ circumstances want to use "Maven":http://maven.apache.org!

"Maven":http://maven.apache.org is a _horrible_ implementation of _bad_ ideas.  I believe someone, somewhere had a vision for "Maven":http://maven.apache.org that was sensible, if not seductive.  Unfortunately, "Maven":http://maven.apache.org development ran counter to any such vision, and the project was lead so far astray that it can never correct its course.  Soon, I expect "Maven":http://maven.apache.org development will collapse under the sheer bulk of its owns crapulence and condense into a singularity, swallowing every project it ever touched.

"Maven":http://maven.apache.org is a festering pile of crap with absolutely no redeeming qualities.  Everything "Maven":http://maven.apache.org advocates tell you is a lie:

* Convention over configuration: the only convention "Maven":http://maven.apache.org supports without configuration is: compile, run unit tests, package .jar file.  Anything else requires configuration, and lots of it!  Things you can do in 1 or 2 lines with "Rake":http://rake.rubyforge.org or "Ant":http://ant.apache.org require 6, 7, 8 lines of verbose, element-normal XML configuration in your pom files (assuming you can even do it at all).
* Dependency management: "Maven":http://maven.apache.org is _not_ a dependency management tool!  "Maven":http://maven.apache.org is a "download ibiblio and dump everything on the classpath" tool.
-- The original Maven build on Diamond/Southwest took 3 minutes and produced a 51 MB .war file; after switching to Ant with manual dependency management, our build took only 1 minute to run the same tests and produce a functionally equivalent 17 MB .war file.
-- I recently endured a 10 minute "mvn clean"  Apparently, there were unresolved dependencies Maven needed to download before it could delete ./target/
-- Maven dependency management is broken and wrong (aside: automatic, transparent transitive dependency management is an intractable problem due to human factors, and ultimately not worth solving, regardless of tool; it's not that hard to correctly manage dependencies by hand, it is the only correct and proper way to manage dependencies, and svn:externals or git submodules are your only real dependency management friends).  Your build WILL break when the dependencies of your dependencies upload new .jar files with the same version number, but with non-backwards compatible changes.  The workarounds (explicitly configuring specific instances of artifacts in some local artifact repository) are all functionally equivalent to checking in .jars to your version control repository, but more complicated - and sometimes more expensive.

* Consistent builds and build files: there's nothing consistent about either Maven itself or the builds it performs.  Some things in Maven are configured as classpath references to .properties files bundled in a JAR and included with a project's dependencies, and some things are configured as absolute or relative paths to files on disk, and some things are configured as system properties in the JVM running Maven.  And some of those absolute paths are portable across projects because Maven knows how to correctly resolve them, but some are not.  And sometimes Maven is smart enough to recursively build projects in the correct order, but sometimes it's not.
-- Like Neal said, Maven builds are nondeterministic.
-- The original Maven build on Diamond/Southwest also suffered from a curious anomaly that we never solved: the first build of the morning would always fail.  The work-around was to explicitly build only the first module in our project (i.e. the one that didn't depend on any of the other modules in our project), install it into the local Maven repository, and then re-run the full build.  This was the case with every machine, every day.  WTF?!

-- Check out the pom.xml configuration reference to see how you declare filesets with exclusion/inclusion filters in Maven :(


If you get shafted with Maven on any project, you have my deepest and most sincere sympathy.  Maven build processes are an infinite cycle of despair that will slowly drag you into the deepest, darkest pits of hell (where Maven itself was forged).  You will initially only spend 10 minutes getting Maven up and running, and might even be happy with it for a while.  But as your project evolves, and your build grows, the basic pom that you started with will prove inadequate.  You will slowly add more configuration to get things working the way you need, but there's only so much you can configure in Maven; you will come to desire the flexibility and scripting abilities of Ant (I know!  Can you believe it?!  Yearning for the flexibility and scriptability of Ant?!  Only with Maven...).  Soon thereafter, you will encounter Maven's low glass ceiling for the first time.  By "encounter," I mean "smash your head painfully against."  By "for the first time," I mean "you will do this repeatedly and often."  Eventually, you'll figure out some convulted pom.xml hackery to work around your immediate issue.  You might even be happy with Maven again for a while... until another Maven limitation rears its ugly little head.  It's a lot like some tragic Greek myth, only you are the damned soul and the eternity of suffering is your day job.
