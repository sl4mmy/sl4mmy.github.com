---
categories: work
date: December 30, 2009
layout: article
title: "Make All Environments Consistent"
---

Consistent environments are important on software projects.  They increase the team's productivity, make it easier to diagnose, replicate and resolve bugs, make it easier to tune performance and scale the application, and reduce the cost of administration and maintenance.  Building consistent environments is a great candidate for automation; in fact, tools like "Chef":chef and "Puppet":puppet were written for exactly this purpose.  But Chef and Puppet are complicated, heavyweight solutions.  They also require a considerable amount of infrastructure themselves ("git":git, "Ruby":ruby, etc.)!

For lighter, simpler configuration needs I prefer "Makefiles":make.  Makefiles are great for this sort of thing because versions of "Make":make exist for every operating system, and most UNIX systems come with some version already installed.

Makefile syntax is familiar to system administrators and easy to learn, and because Makefiles are "shell scripts":sh (with a few format constraints) they map directly to the sequence of steps you would perform manually to setup your environments.  But arguably the biggest advantage of Makefiles is they won't do anything when the file about to be installed or modified exists.  This is critical in shared production environments where services might already be installed and configured for other applications, and you don't want to risk accidentally overwriting something important.

Consider a project dependent on "Java":java and "JRuby":jruby, and a convention that third-party applications should be installed under @/opt/apps/<name>/<name>-<version>@.  The following Makefile installs and configures this project's environment accordingly:

<pre><code>
# Makefile

JAVA_VERSION=1.6.0_18
JRUBY_VERSION=1.4.0

# TARGET 0:
all: java jruby

# TARGET 1:
java: /opt/apps/java/java-${JAVA_VERSION}

# TARGET 2:
jruby: /opt/apps/jruby/jruby-${JRUBY_VERSION}

# TARGET 3:
/opt/apps/java/java-${JAVA_VERSION}/: /opt/apps/java/ /tmp/java-${JAVA_VERSION}.tar.gz
	(cd /opt/apps/java; tar czf /tmp/java-${JAVA_VERSION}.tar.gz)

# TARGET 4:
/opt/apps/jruby/jruby-${JRUBY_VERSION}/: /opt/apps/jruby/ /tmp/jruby-${JRUBY_VERSION}.tar.gz
	(cd /opt/apps/jruby; tar czf /tmp/jruby-${JRUBY_VERSION}.tar.gz)

# TARGET 5:
/opt/apps/java/: /opt/apps/
	mkdir /opt/apps/java

# TARGET 6:
/opt/apps/jruby/: /opt/apps/
	mkdir /opt/apps/jruby

# TARGET 7:
/tmp/java-${JAVA_VERSION}.tar.gz:
	# Shell commands to download Java

# TARGET 8:
/tmp/jruby-${JRUBY_VERSION}.tar.gz:
	# Shell commands to download JRuby

# TARGET 9:
/opt/apps/:
	mkdir -p /opt/apps

</code></pre>

<br/>
Starting from the top:

<pre><code>
# Makefile

JAVA_VERSION=1.6.0_18
JRUBY_VERSION=1.4.0

</code></pre>

You should always name your Makefiles as @Makefile@ because Make will look for that file in the current directory by default when it runs.  You _are_ free to name your Makefiles anything you wish, but if they are _not_ named @Makefile@ then Make will require additional configuration telling it which file to load.

Makefile comments start with #, just like shell scripts.  The @# Makefile@ comment in this example is not necessary, it is only for illustrative purposes.

The first two non-comment lines define variables that will be used throughout this Makefile.  You may safely assume the syntax for defining and referencing variables in Makefiles is identical to shell scripting.

<pre><code>
# TARGET 0:
all: java jruby

</code></pre>

Target 0, named @all@ here but could be named anything, is the default target because it is the first target declared in this Makefile. Running @make@ in the directory containing this Makefile is equivalent to running @make all@.

Make is a file-centric build tool; it assumes the purpose of each target is to produce (or "make," natch) a single file.  By convention, the name of a target is the name of the output file produced by invoking that target.  In our example, Make assumes that the @all@ target will produce a file in the current directory named @all@.  Make uses this convention to determine whether or not it actually needs to execute that target: if a file named @all@ already exists in the current directory, Make won't execute the @all@ target.

Of course, targets are _not required_ to actually produce a file with the same name as the target, but if they don't Make will never think such targets are up-to-date and will execute them every time.  In this case, we want Make to do exactly that; our goal is not to produce a file named @all@ in the current directory, our goal is to set up a fully working environment on any machine by simply copying this Makefile and running @make@.  We are using @all@ as a convenience target so that we can make _both_ @java@ and @jruby@ by default.  If there were more dependencies, we could create separate targets for each of them and add them as additional prerequisites of @all@.

Our @all@ target is declared with two prerequisites: @java@ and @jruby@.  Make executes all prerequisites before executing the target, so our @java@ and @jruby@ targets will execute before @all@.

<pre><code>
# TARGET 1:
java: /opt/apps/java/java-${JAVA_VERSION}

# TARGET 2:
jruby: /opt/apps/jruby/jruby-${JRUBY_VERSION}

</code></pre>

The @java@ and @jruby@ targets are declared in Target 1 and Target 2, and each have a single dependency on the Java and JRuby installation directories defined in our convention.  Absolute paths are valid target names in Makefiles, and since they are used as prerequisites here, Make will search for targets with those names before it executes the @java@ or @jruby@ targets.

<pre><code>
# TARGET 3:
/opt/apps/java/java-${JAVA_VERSION}/: /opt/apps/java/ /tmp/java-${JAVA_VERSION}.tar.gz
	(cd /opt/apps/java; tar czf /tmp/java-${JAVA_VERSION}.tar.gz)

# TARGET 4:
/opt/apps/jruby/jruby-${JRUBY_VERSION}/: /opt/apps/jruby/ /tmp/jruby-${JRUBY_VERSION}.tar.gz
	(cd /opt/apps/jruby; tar czf /tmp/jruby-${JRUBY_VERSION}.tar.gz)

</code></pre>

The @/opt/apps/java/java-${JAVA_VERSION}/@ and @/opt/apps/jruby/jruby-${JRUBY_VERSION}/@ targets are declared in Target 3 and Target 4.  They both have two prerequisites, and one step.  Notice that the trailing slash in each target's name makes it explicit to Make that these targets produce directories.

Steps are shell commands Make runs when it executes a target, and virtually any valid shell script is also a valid step.  Steps are associated with the target immediately above them in the Makefile, and they _must_ begin with a @TAB@ (*no spaces!*).  Multiple steps can be associated with a target and will run in order, but each line _must_ begin with a @TAB@ (*no spaces!*).  Makefiles are very touchy about whitespace: every line beginning with a @TAB@ below a target definition is a step for that target, and the first line that does _not_ begin with a @TAB@ is the separator between targets.

When Target 3 is executed, Make will spawn a temporary subshell, change the current working directory to @/opt/apps/java@ and expand @/tmp/java-${JAVA_VERSION}.tar.gz@ there.  The parenthesis around the step definition are not required by Make, they are used here as in a regular shell script: the enclosed commands will run in a subshell, returning to the parent shell when finished.  I did this so that changing directories in this step won't affect the rest of the Makefile.  Target 4 does the same for JRuby.

<pre><code>
# TARGET 5:
/opt/apps/java/: /opt/apps/
	mkdir /opt/apps/java

# TARGET 6:
/opt/apps/jruby/: /opt/apps/
	mkdir /opt/apps/jruby

...

# TARGET 9:
/opt/apps/:
	mkdir -p /opt/apps

</code></pre>

Target 3 (@/opt/apps/java/java-${JAVA_VERSION}/@) depends on @/opt/apps/java/@, declared as Target 5, and Target 4 (@/opt/apps/jruby/jruby-${JRUBY_VERSION}/@) depends on @/opt/apps/jruby/@, declared as Target 6.  Both targets depend on @/opt/apps/@, declared as Target 9.  These three targets ensure that the correct directory structure exists according to our convention, creating missing directories as necessary.

<pre><code>
# TARGET 7:
/tmp/java-${JAVA_VERSION}.tar.gz:
	# Shell commands to download Java

# TARGET 8:
/tmp/jruby-${JRUBY_VERSION}.tar.gz:
	# Shell commands to download JRuby

</code></pre>

Targets 7 and 8 are placeholders showing how to download the necessary files before building an environment.

So, what happens when you run @make@ on a clean environment without any of the directory structure or tarballs necessary for this project?

# Make looks for a file named @Makefile@ in the current directory, and loads it if it exists
# Make parses our Makefile, setting the @JAVA_VERSION@ and @JRUBY_VARIABLES@ for use by the rest of the Makefile
# Since no target was explicitly given on the command line, Make executes the first target declared in the Makefile by default; in this case, the default target is @all@
# Make checks the current directory to see if a file named @all@ already exists
# Since no file named @all@ exists in the current directory, Make checks for prerequisites of the @all@ target
# Make tries

[ant]http://ant.apache.org
[chef]http://wiki.opscode.com/display/chef/Home
[git]http://www.git-scm.com
[java]http://java.sun.com
[jruby]http://jruby.org
[make]http://www.opengroup.org/onlinepubs/009695399/utilities/make.html
[puppet]http://reductivelabs.com/products/puppet/
[rake]http://rake.rubyforge.org
[ruby]http://www.ruby-lang.org
[sh]http://www.opengroup.org/onlinepubs/009695399/utilities/sh.html
[ubuntu]http://www.ubuntu.com
